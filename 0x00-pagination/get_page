#!/usr/bin/env python3
""" Simple pagination
"""

import csv
from typing import List, Tuple


class Server:
    """Server class to paginate a database of popular baby names.
    """
    DATA_FILE = "Popular_Baby_Names.csv"

    def __init__(self):
        """Initialize the Server instance with a private dataset attribute.
        """
        self.__dataset: List[List[str]] = None

    def dataset(self) -> List[List[str]]:
        """Load the dataset from the CSV file if not already cached.
        
        Returns:
            List[List[str]]: The dataset excluding the header row, or an empty list if file not found.
        """
        if self.__dataset is None:
            try:
                with open(self.DATA_FILE) as f:
                    reader = csv.reader(f)
                    dataset = [row for row in reader]
                self.__dataset = dataset[1:]  # Skip header row
            except FileNotFoundError:
                self.__dataset = []

        return self.__dataset

    def get_page(self, page: int = 1, page_size: int = 10) -> List[List[str]]:
        """Retrieve a specific page of the dataset.
        
        Args:
            page (int): The page number to retrieve (1-indexed).
            page_size (int): The number of items per page.
        
        Returns:
            List[List[str]]: The list of rows for the specified page.
        
        Raises:
            AssertionError: If page or page_size are not positive integers.
        """
        assert isinstance(page, int) and page > 0, "Page number must be a positive integer."
        assert isinstance(page_size, int) and page_size > 0, "Page size must be a positive integer."
        csv_size = len(self.dataset())
        start, end = index_range(page, page_size)
        end = min(end, csv_size)
        if start >= csv_size:
            return []
        return self.dataset()[start:end]


def index_range(page: int, page_size: int) -> Tuple[int, int]:
    """Calculate the start and end index for pagination.
    
    Args:
        page (int): The page number (1-indexed).
        page_size (int): The number of items per page.
        
    Returns:
        Tuple[int, int]: A tuple of (start, end) indices for the page.
    """
    return (page - 1) * page_size, page * page_size

